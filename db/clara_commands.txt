//clara
// Locking down unique IDs. Can't have duplicates in our matrix.

CREATE CONSTRAINT pid IF NOT EXISTS FOR (p:Patient) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT prid IF NOT EXISTS FOR (p:Practitioner) REQUIRE p.id IS UNIQUE;
CREATE CONSTRAINT orgid IF NOT EXISTS FOR (o:Organization) REQUIRE o.id IS UNIQUE;
CREATE CONSTRAINT encid IF NOT EXISTS FOR (e:Encounter) REQUIRE e.id_name IS UNIQUE;
CREATE CONSTRAINT cond IF NOT EXISTS FOR (c:Condition) REQUIRE c.id IS UNIQUE;
CREATE CONSTRAINT obs IF NOT EXISTS FOR (o:Observation) REQUIRE o.id IS UNIQUE;
CREATE CONSTRAINT mr IF NOT EXISTS FOR (m:MedicationRequest) REQUIRE m.id IS UNIQUE;
CREATE CONSTRAINT pr IF NOT EXISTS FOR (pr:Procedure) REQUIRE pr.id IS UNIQUE;



// Unleashing the JSON data stream, starting with patients.

call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent with ent where ent.resource.resourceType ="Patient"
Create (p: Patient {lname: ent.resource.name[0].family, fname: ent.resource.name[0].given[0], sex: ent.resource.gender, birthDate: ent.resource.birthDate, state: ent.resource.address[0].state, city: ent.resource.address[0].city, zip: ent.resource.address[0].postalCode, id: ent.resource.id});

// Next node - practitioners.

call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Practitioner"
CREATE (prov: Practitioner {fname: ent.resource.name[0].given[0], name: ent.resource.name[0].family, gender: ent.resource.gender, id: ent.resource.id});


// Organizations

call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Organization"
create (org: Organization {name: ent.resource.name, orgtype: ent.resource.type[0].coding[0].display, id: ent.resource.id, addressCity: ent.resource.address[0].city, addressState: ent.resource.address[0].state, addressLine: ent.resource.address[0].line[0]});

// Encounters

call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Encounter"
create (enc: Encounter {type: ent.resource.class.code, id: ent.resource.id, provider: ent.resource.participant[0].individual.reference,
encstart: ent.resource.period.start,
encend: ent.resource.period.end,
id: ent.resource.id,
pid: ent.resource.subject.reference,
status: ent.resource.status,
orgid: ent.resource.serviceProvider.reference
});

// Conditions

call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Condition"
create (c: Condition {
type: ent.resource.resourceType,
id: ent.resource.id,
clinicalstatus: ent.resource.clinicalstatus.coding[0].code,
verificationstatus: ent.resource.verificationStatus.coding[0].code,
conditioncode: ent.resource.code.text,
pid: ent.resource.subject.reference,
encref: ent.resource.encounter.reference,
onsetdate: ent.resource.onsetDateTime,
recordeddata: ent.resource.recordedDate

});

// Observations

call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Observation"
create (obs: Observation {
id: ent.resource.id,
obscategory: ent.resource.category[0].coding[0].display,
obstext: ent.resource.code.text,
encid: ent.resource.encounter.reference,
obstimedate: ent.resource.effectiveDateTime,
obsvalue: ent.resource.valueQuantity.value,
obsunit: ent.resource.valueQuantity.unit,
obscode: ent.resource.valueQuantity.code,
pid: ent.resource.subject.reference});




call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="MedicationRequest"
create (medrequest: MedicationRequest {
id: ent.resource.id,
status: ent.resource.status,
intent: ent.resource.intent,
codingdisplaytext: ent.resource.medicationCodeableConcept.text,
codingdisplaycode: ent.resource.medicationCodeableConcept.coding[0].code,
pid: ent.resource.subject.reference,
encid: ent.resource.encounter.reference,
reasonid: ent.resource.reasonReference[0].reference,
requesterid: ent.resource.requester.reference,
authoredon: ent.resource.authoredOn
});




call apoc.load.json("file:///Clara183_Carbajal274_FHIR.json") yield value unwind value.entry as ent
with ent
where ent.resource.resourceType ="Procedure"
create (pr: Procedure {
id: ent.resource.id,
status: ent.resource.status,
intent: ent.resource.intent,
codingdisplaytext: ent.resource.code.text,
pid: ent.resource.subject.reference,
encid: ent.resource.encounter.reference,
reasonid: ent.resource.reasonReference[0].reference,
startdate: ent.resource.performedPeriod.start,
enddate: ent.resource.performedPeriod.stop
});



// Making connections.


match (p:Patient),(e:Encounter) where e.pid contains p.id CREATE (p)-[r:HASENCOUNTER]->(e)
RETURN type(r);



match (o: Observation),(e: Encounter) where o.encid contains e.id CREATE (e)-[r:HASOBSERVATION]->(o)
RETURN type(r);



match (c: Condition),(e: Encounter) where c.encref contains e.id CREATE (e)-[r:REVEALEDCONDITION]->(c)
RETURN type(r);



match (c: Condition),(p: Patient) where c.pid contains p.id CREATE (p)-[r:CONDITION {date: c.onsetdate}]->(c)
RETURN type(r);



MATCH (c:Condition)
WITH c
ORDER BY c.onsetdate ASC
LIMIT 50
WITH collect(c) as conditions
FOREACH (i in range(0, size(conditions) - 2) |
 FOREACH (node1 in [conditions[i]] |
  FOREACH (node2 in [conditions[i+1]] |
   CREATE (node1)-[:NEXTCONDITION{date: node2.onsetdate}]->(node2))));



MATCH (c:Condition), (p:Patient) where c.pid contains p.id
WITH c, p ORDER BY c.onsetdate ASC LIMIT 1
CREATE (p)-[r:FIRSTCONDITION {date: c.onsetdate}]->(c)
RETURN type(r);


MATCH (c:Condition), (p:Patient) where c.pid contains p.id
WITH c, p ORDER BY c.onsetdate DESC LIMIT 1
CREATE (p)-[r:LATESTCONDITION {date: c.onsetdate}]->(c)
RETURN type(r);




match (c: Condition),(mr: MedicationRequest) where mr.reasonid contains c.id CREATE (mr)-[r:TREATMENTFOR]->(c)
RETURN type(r);


match (c: Condition),(pr: Procedure) where pr.reasonid contains c.id  CREATE (pr)-[r:PROCEDUREFORTREATMENT]->(c)
RETURN type(r);

match (e: Encounter),(pr: Procedure) where pr.encid contains e.id  CREATE (pr)-[r:PROCEDUREINENCOUNTER]->(c)
RETURN type(r);
